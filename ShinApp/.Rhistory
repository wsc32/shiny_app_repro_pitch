a <- available.packages()
a <- available.packages() head(rownames(a), 3)
a <- available.packages()head(rownames(a), 3)
a <- available.packages()head(rownames(a), 3)
a <- available.packages()
head(rownames(a), 3)
a <- available.packages()
head(rownames(a),3)
install.packages("KernSmooth")
library(KernSmooth)
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
ls
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
read.csv(path2csv, stringsAsFactors=FALSE)
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
exit
?
q
swirl()
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head()
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
length(unique_vals)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique, numeric(1))
ok()
sapply(falgs,class)
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
?iris
dim(iris)
head(iris)
tapply(flags$Sepal.Length, flags$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
?apply
apply(iris, 2, mean)
library(datasets)
data(mrcars)
data(mtcars)
dim(mtcars)
head(mtcars)
tapply(mtcars$mpg,mtcars$cyl,mean)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
split(mtcars$mpg, mtcars$cyl
)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
?with
sapply(mtcars, cyl, mean)
tapply(mtcars$hp,mtcars$cyl,summary)
debug(ls)
ls
getwd()
q
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
n
ncol(plants)
object.size(plants)
names(plants)
head(okants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,prob=c(0.3,0.7))
flips <- sample(0:1, 100, prob=c(0.3,0.7))
flips <- sample(c(0,1),100,prob=c(0.3,0.7))
flips <- sample(c(0,1),100,prob=c(0.3,0.7))
flips <- sample(c(0,1), 100, prob=c(0.3,0.7))
flips <- sample(0:1, 100, prob=0.3,0.7)
flips <- sample(0:1, 100, prob=(0.3,0.7))
flips <- sample(0:1, 100, prob=c(0.3,0.7))
flips <- sample(c(0,1), 100, prob=c(0.3,0.7), replace=TRUE)
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(n=100, size=1, prob=0.7)
flips2
sum(flips2)
rnorm()
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois()
rpois(5, mean=10)
rpois(5, 10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(cars)
plot(x = cars$speed, y = cars$dist, xlab= "speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab= "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab= "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab= "Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2
)
data.frame(mtcars)
data(mtcars)
?boxplot
boxplot(mpg~cyl, mtcars)
hist(mtcars$mpg)
set.seed(1)
rpois(5, 2)
?rpois
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?set.seed
set.seed(2)
rpois(5, 2)
set.seed(2)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?rnorm
?rpois
rep(0:1, each = 5)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
ploy(x,y)
plot(x,y)
?rpois
system.time()
library(swirl)
swirl()
head()
head()
head()
head()
head(x)
dir()
head(mydf)
q()
?strsplit
?names
?cnames
?less
?strsplit
?unique
?subset
library(swirl)
swirl()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
?wday
?qunif
qunif(0.75, 0, 1)
?qbeta
qbeta(0.5,1,2)
qbeta(0.5,2,1)
library(swirl)
swirl()
install_from_swirl("Statistical Inference")
pbinom(3,size=5,prob=0.5,lower.tail=FALSE)
ppois(10,lambda=5*4)
ppois(10,lambda=5*3)
?range
?seq
seq(from=20, to=40)
seq(from=20, to=40, length.out=122)
seq(from=20, to=40, length.out=12)
seq(from=0.1, to=0.4, length.out=8)
?matrix
matrix(nrow=8,ncol=12)
r <- seq(from=20, to=40, length.out=12)
c <- seq(from=0.1, to=0.4, length.out=8)
m <- matrix(nrow=8,ncol=12)
m <- r
m
m <- matrix(nrow=8,ncol=12)
m[n,]<-r
m[1,]<-r
m
r
c
c <- seq(from=20, to=40, length.out=12)
r <- seq(from=0.1, to=0.4, length.out=8)
clear
c
r
seq(from=25, to=35, length.out=12)
c
1100 +c(-1,1)*qt(0.95,8)*(30/3)
6/(qt(0.95,8))
qt(0.95,8)
6/1.856
-2 +c(-1,1)*qt(0.95,8)*(2.6/3)
-2 +c(-1,1)*qt(0.95,8)*(0.3/3)
-2 +c(-1,1)*qt(0.95,8)*(2.1/3)
-2 +c(-1,1)*qt(0.95,8)*(1.5/3)
sp <- sqrt((9*0.6^2+9*0.68^2)/(18))
3-5+c(-1,1)*qt(0.95,19)*sp*(1/10+1/10)^0.5
3-5+c(-1,1)*qt(0.95,18)*sp*(1/10+1/10)^0.5
x <- (0.6^2)/9
y <- (0.68^2)/9
df <- ((x+y)^2)/((x^2/9)+(y^2/9))
quantile(0.975,15.04)
quantile(15.05,0.975)
qt(0.95,15.04)
qt(0.975,15.04)
3-5+(c-1,1)*qt(0.95,df)*(x+y)^0.5
3-5+c(-1,1)*qt(0.95,df)*(x+y)^0.5
sqrt(7.92)
sp <- sqrt((9*0.6+9*0.68)/(18))
x <- (0.6)/9
y <- (0.68)/9
df <- ((x+y)^2)/((x^2/9)+(y^2/9))
3-5+(c-1,1)*qt(0.95,df)*(x+y)^0.5
3-5+c(-1,1)*qt(0.95,df)*(x+y)^0.5
sp <- sqrt((9*0.6+9*0.68)/(18))
3-5+c(-1,1)*qt(0.95,18)*sp*(1/10+1/10)^0.5
sp <- sqrt((9*0.6+9*0.68)/(18))
3-5+c(-1,1)*qt(0.975,18)*sp*(1/10+1/10)^0.5
6/(qt(0.975,8))
3-5+c(-1,1)*qt(0.95,18)*sp*(1/10+1/10)^0.5
?q
?qt
(6-4)+c(-1,1)*qnorm(0.975)*(0.5^2/100+2^2/100)^0.5
x <- 1.5^2/9
y <- 1.8^2/9
df <- (x+y)^2/(x^2/8+y^2/8)
df
-3-1+c(-1,1)*qt(0.95,df)*(x+y)^0.5
sp2 <- sqrt(9*1.5^2+9*1.8^2)/(16)
-3-1+c(-1,1)*qt(0.95,18)*sp2*(1/9+1/9)^0.5
sp2 <- sqrt((9*1.5^2+9*1.8^2)/(16))
-3-1+c(-1,1)*qt(0.95,18)*sp2*(1/9+1/9)^0.5
-3-1+c(-1,1)*qt(0.95,16)*sp2*(1/9+1/9)^0.5
install.packages("rattle")
library("rattle")
library("rattle")
library(rattle)
install.packages("rattle")
library(rattle)
colSums
lm
mean
dgamma
predict()
predict
show
predict
colSums
showMethods("plot")
showMethods("show")
getMethod("plot")
getClass("plot")
colSums
predict
colSums
library(shiny);library(UsingR);data(diamond)
head(diamond)
plot(caret,price,data=diamond)
qplot(caret,price,data=diamond)
qplot(carat,price,data=diamond)
summary(diamond)
model <- lm(diamond$price ~ diamond$carat)
summary(model)$coefficients
fit <- lm(diamond$price ~ diamond$carat)
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]) / 10
y <- diamond$price; x <- diamond$carat
fit <- lm(y ~ x)
runApp('C:/Data Science/9_Developing_Data_Products/shiny_app_repro_pitch/ShinApp')
runApp('C:/Data Science/9_Developing_Data_Products/shiny_app_repro_pitch/ShinApp')
runApp('C:/Data Science/9_Developing_Data_Products/shiny_app_repro_pitch/ShinApp')
runApp('C:/Data Science/9_Developing_Data_Products/shiny_app_repro_pitch/ShinApp')
runApp('C:/Data Science/9_Developing_Data_Products/shiny_app_repro_pitch/ShinApp')
runApp('C:/Data Science/9_Developing_Data_Products/shiny_app_repro_pitch/ShinApp')
runApp('C:/Data Science/9_Developing_Data_Products/shiny_app_repro_pitch/ShinApp')
runApp('C:/Data Science/9_Developing_Data_Products/shiny_app_repro_pitch/ShinApp')
runApp('C:/Data Science/9_Developing_Data_Products/shiny_app_repro_pitch/ShinApp')
carat
runApp('C:/Data Science/9_Developing_Data_Products/shiny_app_repro_pitch/ShinApp')
?predict
qplot(x=carat, y=price, data=diamond)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='wsc32',
token='6BC9091511A90EF925C86DA24A06124D',
secret='<SECRET>')
rsconnect::setAccountInfo(name='wsc32', token='6BC9091511A90EF925C86DA24A06124D', secret='4sb7LSZRdbt/ZRlp6A8h096DYFL8ZPpEZvxWD5IB')
setwd("C:/Data Science/9_Developing_Data_Products/shiny_app_repro_pitch/ShinApp")
library(rsconnect)
rsconnect::deployApp()
runApp()
rsconnect::deployApp()
library(rsconnect)
rsconnect::deployApp()
rsconnect::setAccountInfo(name='wsc32', token='6BC9091511A90EF925C86DA24A06124D', secret='4sb7LSZRdbt/ZRlp6A8h096DYFL8ZPpEZvxWD5IB')
rsconnect::deployApp()
rsconnect::setAccountInfo(name='wsc32', token='6BC9091511A90EF925C86DA24A06124D', secret='4sb7LSZRdbt/ZRlp6A8h096DYFL8ZPpEZvxWD5IB')
rsconnect::deployApp()
